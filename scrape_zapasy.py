import os
import requests
from bs4 import BeautifulSoup
from supabase import create_client, Client
import re

# --- Nastaven√≠ ---
# Seznam f√°z√≠ soutƒõ≈æe s jejich URL a n√°zvy
PHASES_TO_SCRAPE = [
    {"nazev": "Play-Off", "url": "https://cechysever.cmshb.cz/tym?id=358&page=games&competition=866&part=2402&season=22&team=15076&showRound=&matchFilter=1"},
    {"nazev": "Nadstavba - skupina A", "url": "https://cechysever.cmshb.cz/tym?id=358&page=games&competition=866&part=2377&season=22&team=15076&showRound=&matchFilter=1"},
    {"nazev": "Z√°kladn√≠ ƒç√°st", "url": "https://cechysever.cmshb.cz/tym?id=358&page=games&competition=866&part=2317&season=22&team=15076&showRound=&matchFilter=1"}
]
WARRIORS_TEAM_NAMES = ["HS√ö SHC Warriors Chlumec", "Warriors Chlumec", "Warriors Chlumec B", "SHC Warriors Chlumec"] # P≈ôidej v≈°echny varianty n√°zvu

SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")

if not SUPABASE_URL or not SUPABASE_KEY:
    print("Chyba: SUPABASE_URL nebo SUPABASE_KEY nejsou nastaveny v prost≈ôed√≠!")
    exit()

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def parse_score(score_text):
    score_text = score_text.strip()
    if ':' not in score_text or "vs" in score_text.lower():
        return None, None
    parts = score_text.split(':')
    try:
        return int(parts[0].strip()), int(parts[1].strip())
    except (ValueError, IndexError):
        return None, None

def determine_warriors_result(domaci_tym, hostujici_tym, domaci_skore, hostujici_skore):
    if domaci_skore is None or hostujici_skore is None:
        return None

    warriors_hr√°li_doma = any(name.lower() in domaci_tym.lower() for name in WARRIORS_TEAM_NAMES)
    warriors_hr√°li_venku = any(name.lower() in hostujici_tym.lower() for name in WARRIORS_TEAM_NAMES)

    if warriors_hr√°li_doma:
        if domaci_skore > hostujici_skore: return "vyhra"
        elif domaci_skore < hostujici_skore: return "prohra"
        else: return "remiza"
    elif warriors_hr√°li_venku:
        if hostujici_skore > domaci_skore: return "vyhra"
        elif hostujici_skore < domaci_skore: return "prohra"
        else: return "remiza"
    return None

def scrape_games_for_phase(url, faze_nazev):
    print(f"Stahuji z√°pasy pro f√°zi: {faze_nazev} z URL: {url}")
    try:
        page = requests.get(url, timeout=10)
        page.raise_for_status() # Zkontroluje HTTP errory
    except requests.exceptions.RequestException as e:
        print(f"Chyba p≈ôi stahov√°n√≠ URL {url}: {e}")
        return []
        
    soup = BeautifulSoup(page.content, "html.parser")
    games_data = []
    
    # !!! KONTROLUJ A UPRAV TYTO SELEKTORY PODLE SKUTEƒåN√â STRUKTURY WEBU !!!
    # P≈ôedpokl√°d√°m, ≈æe ka≈æd√Ω z√°pas je v nƒõjak√©m kontejneru.
    # ƒåasto to b√Ωv√° <div class="match-item">, <article class="game-summary">, nebo <li> v <ul>
    # Zkus naj√≠t nejbli≈æ≈°√≠ spoleƒçn√Ω opakuj√≠c√≠ se element pro ka≈æd√Ω z√°pas.
    # Na str√°nce to vypad√°, ≈æe z√°pasy jsou v <div class="col-12 col-md-6 mb-3">
    # a cel√Ω seznam je v <div class="games-list row">
    
    game_list_container = soup.select_one("div.games-list.row") # Hled√°me hlavn√≠ kontejner se seznamem z√°pas≈Ø
    if not game_list_container:
        print(f"Hlavn√≠ kontejner z√°pas≈Ø ('div.games-list.row') nenalezen na URL: {url}")
        print("HTML str√°nky (prvn√≠ch 1000 znak≈Ø):", page.text[:1000]) # Vyp√≠≈°e zaƒç√°tek HTML pro kontrolu
        return []

    # Hled√°me jednotliv√© karty z√°pas≈Ø uvnit≈ô tohoto kontejneru
    game_cards = game_list_container.select("div[class*='col-md-6']") # Ka≈æd√Ω z√°pas je v takov√©m divu

    if not game_cards:
        print(f"Nenalezeny ≈æ√°dn√© karty z√°pas≈Ø ('div[class*=\'col-md-6\']') uvnit≈ô 'div.games-list.row' na URL: {url}")
        return []

    print(f"Nalezeno {len(game_cards)} potenci√°ln√≠ch karet z√°pas≈Ø pro f√°zi '{faze_nazev}'.")

    for card in game_cards:
        try:
            # DATUM A ƒåAS Z√ÅPASU
            # Hledej element, kter√Ω obsahuje datum a ƒças. M≈Ø≈æe m√≠t t≈ô√≠du jako "date-time", "game-date".
            # P≈ô√≠klad: <p class="text-muted small">SO 07.10.2023, 14:00 ‚Ä¢ Sportovn√≠ hala Chlumec</p>
            date_time_el = card.select_one("p.small") # Uprav tento selektor!
            datum_cas_text = "Nezn√°m√© datum"
            if date_time_el:
                full_text = date_time_el.get_text(separator=" ", strip=True)
                # Zkus√≠me extrahovat jen tu ƒç√°st s datem a ƒçasem
                match = re.search(r"([A-Z≈Ω≈†ƒå≈òƒé≈§≈á√ö≈Æ√ù√Å√â√ç√ì]{2}\s*\d{1,2}\.\d{1,2}\.\d{4},\s*\d{1,2}:\d{2})", full_text)
                if match:
                    datum_cas_text = match.group(1)
                else:
                    datum_cas_text = full_text.split("‚Ä¢")[0].strip() # Z√°lo≈æn√≠ ≈ôe≈°en√≠, vezme text p≈ôed ‚Ä¢

            # T√ùMY
            # Dom√°c√≠ t√Ωm je ƒçasto vlevo nebo naho≈ôe, hostuj√≠c√≠ vpravo nebo dole.
            # Hledej elementy s t≈ô√≠dami jako "team-home-name", "team-away-name" nebo jen "team-name".
            # Na str√°nce to vypad√° na: 
            # <div class="team-name team-name-home">...</div> a <div class="team-name team-name-away">...</div>
            home_team_el = card.select_one("div.team-name-home a, div.team-name-home span") # Uprav! M≈Ø≈æe b√Ωt v <a> nebo <span>
            away_team_el = card.select_one("div.team-name-away a, div.team-name-away span") # Uprav!
            
            if not home_team_el or not away_team_el:
                # print(f"P≈ôeskakuji kartu, nenalezeny oba t√Ωmy: {card.prettify()[:200]}") # Pro debug
                continue
            domaci_tym = home_team_el.text.strip()
            hostujici_tym = away_team_el.text.strip()

            # SK√ìRE
            # ƒåasto v elementu s t≈ô√≠dou "score", "result", nebo v√Ωrazn√Ωm fontem.
            # Na str√°nce to je <div class="score"><span>DOM</span> : <span>HOST</span></div> nebo <div class="score">vs</div>
            score_el = card.select_one("div.score") # Uprav!
            domaci_skore_val, hostujici_skore_val = None, None
            if score_el:
                score_text = score_el.text.strip()
                if "vs" in score_text.lower():
                    odehrano = False
                else:
                    domaci_skore_val, hostujici_skore_val = parse_score(score_text)
                    odehrano = domaci_skore_val is not None
            else: # Pokud element score v≈Øbec nen√≠
                odehrano = False


            vysledek_warriors = determine_warriors_result(domaci_tym, hostujici_tym, domaci_skore_val, hostujici_skore_val)

            game = {
                "datum_cas_text": datum_cas_text,
                "faze_souteze": faze_nazev,
                "domaci_tym": domaci_tym,
                "hostujici_tym": hostujici_tym,
                "domaci_skore": domaci_skore_val,
                "hostujici_skore": hostujici_skore_val,
                "odehrano": odehrano,
                "vysledek_warriors": vysledek_warriors
            }
            games_data.append(game)
            # print(f"Zpracov√°n z√°pas: {datum_cas_text} | {domaci_tym} {domaci_skore_val} : {hostujici_skore_val} {hostujici_tym}")

        except Exception as e:
            print(f"Chyba p≈ôi parsov√°n√≠ karty z√°pasu: {e}. Karta: {card.text[:200]}...")
            continue
            
    print(f"Zpracov√°no {len(games_data)} z√°pas≈Ø pro f√°zi: {faze_nazev}.")
    return games_data

if __name__ == "__main__":
    all_games_to_db = []
    
    for phase_info in PHASES_TO_SCRAPE:
        games_this_phase = scrape_games_for_phase(phase_info["url"], phase_info["nazev"])
        if games_this_phase: # P≈ôid√°me jen pokud se nƒõco na≈°lo
            all_games_to_db.extend(games_this_phase)
    
    if all_games_to_db:
        print(f"Celkem nalezeno {len(all_games_to_db)} z√°pas≈Ø nap≈ô√≠ƒç f√°zemi. Ukl√°d√°m do Supabase...")
        try:
            # Pou≈æ√≠v√°me 'ignore_duplicates=True' pokud by unik√°tn√≠ kl√≠ƒç selhal,
            # nebo l√©pe zajistit, ≈æe on_conflict je spr√°vnƒõ definov√°n v tabulce a zde
            response = supabase.table('zapasy').upsert(
                all_games_to_db, 
                on_conflict='datum_cas_text,domaci_tym,hostujici_tym'
            ).execute()

            if hasattr(response, 'data') and response.data:
                 print(f"√öspƒõ≈°nƒõ ulo≈æeno/aktualizov√°no {len(response.data)} z√°znam≈Ø o z√°pasech.")
            elif hasattr(response, 'error') and response.error:
                print(f"Chyba p≈ôi ukl√°d√°n√≠ do Supabase: {response.error}")
            else:
                print("Nepoda≈ôilo se ulo≈æit ≈æ√°dn√° data, nebo odpovƒõƒè neobsahuje oƒçek√°van√° data.")
        except Exception as e:
            print(f"V√Ωjimka p≈ôi ukl√°d√°n√≠ dat z√°pas≈Ø do Supabase: {e}")
    else:
        print("Nenalezeny ≈æ√°dn√© z√°pasy k ulo≈æen√≠ nap≈ô√≠ƒç v≈°emi f√°zemi.")
        
    print("Skript pro stahov√°n√≠ z√°pas≈Ø dokonƒçen. üî•")